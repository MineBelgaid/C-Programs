#include <stdio.h>
#include <math.h>
#include "myconio.h"

int basetodec(char number[], int baseA);
int dectobase(char dec[], int baseB);
int basetobase(char num[], int baseA, int baseB);
int inttochar(char chars[], int number);

int main(void)
{
    char test[64] = {"123"};
    int i;
    basetobase(test, 10, 2);
    for (i = 0; i <= strlen(test); i++)
    {
        printf("%c", test[i]);
    }

    getch();
}

int basetodec(char number[], int baseA)
{
    int dec = 0;
    if (baseA <= 10)
    {
        int i = 0, *p, result = 0;
        int intnum = atoi(number);
        while (intnum != 0)
        {
            dec += (intnum % 10) * pow(baseA, i);
            intnum /= 10;
            i++;
        }
    }
    else
    {
        int digit, i, j, count = 0;
        j = strlen(number) - 1;
        for (i = 0; i <= strlen(number) - 1; i++)
        {
            switch (number[i])
            {
            case '0':
                digit = 0;
                break;
            case '1':
                digit = 1;
                break;
            case '2':
                digit = 2;
                break;
            case '3':
                digit = 3;
                break;
            case '4':
                digit = 4;
                break;
            case '5':
                digit = 5;
                break;
            case '6':
                digit = 6;
                break;
            case '7':
                digit = 7;
                break;
            case '8':
                digit = 8;
                break;
            case '9':
                digit = 9;
                break;
            case 'A':
                digit = 10;
                break;
            case 'B':
                digit = 11;
                break;
            case 'C':
                digit = 12;
                break;
            case 'D':
                digit = 13;
                break;
            case 'E':
                digit = 14;
                break;
            case 'F':
                digit = 15;
                break;
            case 'G':
                digit = 16;
                break;
            case 'H':
                digit = 17;
                break;
            case 'I':
                digit = 18;
                break;
            case 'J':
                digit = 19;
                break;
            case 'K':
                digit = 20;
                break;
            case 'L':
                digit = 21;
                break;
            case 'M':
                digit = 22;
                break;
            case 'N':
                digit = 23;
                break;
            case 'O':
                digit = 24;
                break;
            case 'P':
                digit = 25;
                break;
            case 'Q':
                digit = 26;
                break;
            case 'R':
                digit = 27;
                break;
            case 'S':
                digit = 28;
                break;
            case 'T':
                digit = 29;
                break;
            case 'U':
                digit = 30;
                break;
            case 'V':
                digit = 31;
                break;
            case 'W':
                digit = 32;
                break;
            case 'X':
                digit = 33;
                break;
            case 'Y':
                digit = 34;
                break;
            case 'Z':
                digit = 35;
                break;
            }
            dec += (pow(baseA, j) * digit);
            j--;
        }
    }
    return dec;
}
int dectobase(char dec[], int baseB)
{
    int i = 0, rem, result = 0, count = 1;
    int intnum = atoi(dec);
    while (intnum >= baseB)
    {
        intnum /= baseB;
        count++;
    }
    intnum = atoi(dec);
    for (i = count - 1; i >= 0; i--)
    {
        rem = intnum % baseB;
        if (rem >= 10)
        {
            dec[i] = rem + 55;
        }
        else
            dec[i] = rem + 48;
        intnum /= baseB;
        result = 0;
    }
    dec[count] = '\0';
}
int basetobase(char num[], int baseA, int baseB)

{
    inttochar(num, basetodec(num, baseA));
    dectobase(num, 2);
}

int inttochar(char chars[], int number)
{
    int n = number, count = 0, i;
    memset(chars, 0, 20);
    while (n != 0)
    {
        n /= 10;
        count++;
    }
    n = number;
    if (count == 0)
    {
        count = 1;
    }
    for (i = count - 1; i >= 0; i--)
    {
        chars[i] = (n % 10) + '0';
        n /= 10;
    }
}
